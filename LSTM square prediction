import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

# scale and revert scale of input
def rescale(x,a,b):
    z = (x-a)/(b-a)
    return z

def revertscale(z,a,b):
    x = z*(b-a)+a
    return x

# preparing independent and dependent features
def prepare_data(timeseries_data, n_features):
    X, y =[],[]
    for i in range(len(timeseries_data)-n_features):        
        # find the end of this pattern
        end_ix = i + n_features
        # gather input and output parts of the pattern
        seq_x, seq_y = timeseries_data[i:end_ix], timeseries_data[end_ix]
        X.append(seq_x)
        y.append(seq_y)
    return np.array(X), np.array(y)

def LSTM_predict(timeseries_data, n_steps, n_features=1, predict_steps=20):
    
    # split into samples
    X, y = prepare_data(timeseries_data, n_steps)

    # reshape from [samples, timesteps] into [samples, timesteps, features]
    X = X.reshape((X.shape[0], X.shape[1], n_features))

    # define model
    model = Sequential()
    model.add(LSTM(50, activation='relu', input_shape=(n_steps, n_features)))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mse')

    # fit model
    model.fit(X, y, epochs=200, verbose=0) # vervose = 0 make training Epoch not show

    # Prediction
    x_input = []
    x_input = timeseries_data[-(n_steps):]
    
    '''for i in range(n_steps,0,-1):
        x_input.append(timeseries_data[-i])
    x_input = np.array(x_input) # matrix'''

    x_input = x_input.reshape((1, n_steps, n_features)) # tensor
    yhat = model.predict(x_input, verbose=0)


    predict_output = []
    predict_output.append(yhat)
    x_input = x_input[0]

    xx_input = np.append(x_input[-(n_steps-1):],yhat[0])
    xx_input = xx_input.reshape(n_steps,n_features) #matrix
    #xx_input = np.array([x_input[-2],x_input[-1],yhat[0]]) # matrix
    #print(xx_input.shape)

    for i in range(predict_steps):
        xx_input = xx_input.reshape((1, n_steps, n_features)) # tensor
        # LSTM model only accept tensor as input
        yhat = model.predict(xx_input, verbose=0)

        xx_input = xx_input[0]

        xx_input = np.append(xx_input[-(n_steps-1):],yhat[0])
        xx_input = xx_input.reshape(n_steps,n_features) #matrix

        predict_output.append(yhat[0,0])

    predict_output = np.array(predict_output, dtype=np.float32)
    return predict_output
